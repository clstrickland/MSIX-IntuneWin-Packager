name: 'Build IntuneWin Package'
description: 'Processes an MSIX file, downloads IntuneWinAppUtil, runs packaging scripts, and outputs the .intunewin file path and source zip.'
author: 'Carter Strickland'

inputs:
  msix_file_path:
    description: 'Path to the input MSIX file (relative to the root of the calling workflow''s workspace)'
    required: true
  app_version:
    description: 'The application version string'
    required: true

outputs:
  intunewin_file_path:
    description: 'The path to the generated .intunewin file (relative to the workspace root)'
    value: ${{ steps.run_packager.outputs.intunewin_path }}
  intunewin_source_zip:
    description: 'The path to the zip file containing the source files used to create the .intunewin file'
    value: ${{ steps.run_packager.outputs.intunewin_source_zip }}

runs:
  using: "composite"
  steps:
  # Step 1: Run the Processor script
  - name: Run Processor Script
    run: |
      Write-Host (Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter "*.msix" -File -ErrorAction SilentlyContinue)
      if (-not (Get-Module -ListAvailable -Name eps)) {
        Write-Host "Installing required module 'eps' from PSGallery..."
        Install-Module -Name eps -Repository PSGallery -Force -Scope CurrentUser
      }
      ${{ github.action_path }}/Processor.ps1 --f:APP_VERSION=${{ inputs.app_version }} --f:MSIX_FILE_NAME=$(Split-Path -Path '${{ inputs.msix_file_path }}' -Leaf)
    shell: pwsh

  # Step 2: Download and Extract IntuneWinAppUtil.exe
  - name: Download and Extract IntuneWinAppUtil.exe
    shell: pwsh
    run: |
      $downloadUrl = "https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/zipball/master"
      $actionPath = "${{ github.action_path }}"
      $zipFileName = "IntuneWinAppUtil_master.zip"
      $zipOutputPath = Join-Path $actionPath $zipFileName
      $extractBasePath = Join-Path $actionPath "extracted_tool"
      $finalExeDir = $actionPath
      $finalExePath = Join-Path $finalExeDir "IntuneWinAppUtil.exe"

      Write-Host "Starting download of source zip from $downloadUrl"
      try {
        Invoke-WebRequest -Uri $downloadUrl -OutFile $zipOutputPath -UseBasicParsing -ErrorAction Stop
        Write-Host "Successfully downloaded $zipFileName to $actionPath"
        if (Test-Path $extractBasePath) {
          Remove-Item -Path $extractBasePath -Recurse -Force -ErrorAction SilentlyContinue
        }
        New-Item -Path $extractBasePath -ItemType Directory -Force | Out-Null
        Expand-Archive -Path $zipOutputPath -DestinationPath $extractBasePath -Force -ErrorAction Stop
        Write-Host "Extraction complete."
        $foundExe = Get-ChildItem -Path $extractBasePath -Recurse -Filter "IntuneWinAppUtil.exe" | Select-Object -First 1
        if ($null -eq $foundExe) {
          Write-Error "IntuneWinAppUtil.exe could not be found within the extracted archive!"
          exit 1
        }
        Move-Item -Path $foundExe.FullName -Destination $finalExePath -Force -ErrorAction Stop
        Write-Host "Moved IntuneWinAppUtil.exe to $finalExePath"
        echo $finalExeDir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      } catch {
        Write-Error "An error occurred during the download/extraction process: $($_.Exception.Message)"
        exit 1
      } finally {
        if (Test-Path $zipOutputPath) {
          Remove-Item -Path $zipOutputPath -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path $extractBasePath) {
          Remove-Item -Path $extractBasePath -Recurse -Force -ErrorAction SilentlyContinue
        }
      }

  # Step 3: Run the Packager script and capture its output
  - name: Run Packager Script
    id: run_packager
    shell: pwsh
    run: |
      $workspacePath = $env:GITHUB_WORKSPACE
      $msixFullPath = '${{ inputs.msix_file_path }}'
      if (-not (Test-Path $msixFullPath -PathType Leaf)) {
        Write-Error "MSIX file not found at calculated path: $msixFullPath"
        exit 1
      }
      Write-Host "Running Packager-Script.ps1 with MSIX file: $msixFullPath"
      ${{ github.action_path }}/Packager-Script.ps1 $msixFullPath

  # Step 4: Verify the existence of the .intunewin file
  - name: Verify IntuneWin File
    shell: pwsh
    run: |
      $intunewinPath = '${{ steps.run_packager.outputs.intunewin_path }}'
      Write-Host "Verifying the existence of the IntuneWin file at: $intunewinPath"
      if (-not (Test-Path $intunewinPath -PathType Leaf)) {
        Write-Error "The IntuneWin file does not exist at the expected path: $intunewinPath"
        exit 1
      }
      Write-Host "The IntuneWin file exists at: $intunewinPath"

  # Step 5: Verify the existence of the source zip file
  - name: Verify IntuneWin Source Zip
    shell: pwsh
    run: |
      $intunewinSourceZip = '${{ steps.run_packager.outputs.intunewin_source_zip }}'
      Write-Host "Verifying the existence of the IntuneWin source zip file at: $intunewinSourceZip"
      if (-not (Test-Path $intunewinSourceZip -PathType Leaf)) {
        Write-Error "The IntuneWin source zip file does not exist at the expected path: $intunewinSourceZip"
        exit 1
      }
      Write-Host "The IntuneWin source zip file exists at: $intunewinSourceZip"
